//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//using NUnit.Framework;
using System;
using Bakalarka;
using UnityEngine;

namespace SolarTests
{
	/*[TestFixture()]
	public class Tests
	{
		[Test()]
		public void TestFactorial ()
		{
			Assert.AreEqual ( Math2f.Factorial(5), 5*4*3*2*1 ); 
			Assert.AreEqual ( Math2f.Factorial(0) , 1);
			Assert.AreEqual ( Math2f.BinomialCoefficient(5,3), (5*4*3) / (3*2*1) );
			Assert.AreEqual ( Math2f.BinomialCoefficient(5,3), Math2f. BinomialCoefficient(5,2));
			Assert.AreEqual( Math2f.HalfBinomialCoefficient(2), (-1.0/8.0) );
			Assert.AreEqual( Math2f.HalfBinomialCoefficient(1), 0.5 );
			Assert.AreEqual( Math2f.HalfBinomialCoefficient(3), 0.0625 );
			Assert.AreEqual( Math2f.HalfBinomialCoefficient(0), 1 );
			Assert.True( Math.Abs ( new Ellipse(10,10).getPerimeter() -  62.832 ) < 0.02 ); 
			Assert.True( Math.Abs ( new Ellipse(10,1).getPerimeter() -  40.623 ) < 0.02 ); 
			Assert.True( Math.Abs ( new Ellipse(10,3).getPerimeter() -  43.859 ) < 0.02 ); 
		
			float sunGravityParam = 1327124.25f;

			Ellipse earth =	new Ellipse(new Vector3(1,0,0), new Vector3(0,1,0), 1520.0f, 0.0167f);
			Assert.True( Math.Abs ( earth.getAverageOrbitalSpeed(sunGravityParam) -  29.79 ) < 0.02 );

			float v = earth.getAverageOrbitalSpeed(sunGravityParam);
			float p = earth.getPerimeter();
			float period = earth.getPeriod(sunGravityParam);


			Assert.AreEqual( earth.getGravitationParameter(period), sunGravityParam );

			Console.WriteLine( "p = {0}, period = {1}", p, period );
			Console.WriteLine( period / 23.975 );
		}
	}*/
}

